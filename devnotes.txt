may 21:
    Upon looking for authentication solutions outside of JWTs, I ended up looking at them again because they 
    are so heavily used. I thought surely I was missing something. The thing that turned me away from them 
    was that there's nowhere to 100% securely store them on the frontend for persistant login sessions. After reading 
    around a lot I found this article to be a lot of help: 
        https://dev.to/gkoniaris/how-to-securely-store-jwt-tokens-51cf
    Reading through the article and the comments carefully I came to this conclusion. 
    The best way to use JWTs for authentication is to do everything I can to prevent XSS on my frontend. 
    Then, I really could either choose between localStorage or httpOnly cookies with strict samesite options.
    This would allow only my site to pull the JWT, and if my site is secure from XSS, then I should be secure.
    That's what I'm going to roll with for now (fingers crossed I won't need to refactor a lot from this)

    I've been using the MongoClient to connect my node server to my database, I think I should be using Mongoose. 
    I should switch to that and refactor my code into services

    I've split my codebase into services and implemented mongoose. Everything is looking way cleaner now! I think I'll 
    switch over to typescript before moving on. That's something I've been wanting to implement in an app.

    Scratch that, I'm going to start my react app, feel like going back into frontend right now
    Pretty much just scaffolded out the project, set up React-Router, and learned about good styling in React. 
    I'm going with CSS modules since it keeps styling very modular much like how Vue does it.
    Now I just need to figure out the correct way to override css module styles from parent components when necessary and 
    then I should have everything I need for styling in React.

may 22:
    I think I've found the best way to override style in css modules when necessary. Passing css modules or even just 
    specific classNames through a prop that I'll call 'extraStyle' worked very well. This makes a lot of sense actually

    Another thing I found is that I should never use basic css selectors like 'h1' or 'div' even in a css module. It 
    will leak to other components. Always give things a specified className. I still very much like css modules with React

    I have an idea for an animation on the landing page, and I'm really tempted to make it right now... I should probably work 
    on something else but whatever I'm just going to do it.

    Animation looks great, now I'll make the login / signup function alright. I guess I'm going to roll with JWT authentication for now, 
    but this will probably change to a serverside session implementation with redis or something

    So I made an animation, learned more about React, have a solid pattern for styling. I think tomorrow I'll make a popup component, 
    and add some username / password validation on signup, as well as some better error handling / responses from the api. Not sure if 
    I should start on the dashboard with a page to customize the user or with the actual implementation of uploading sounds and viewing the 
    'sound tree' I'll probably start with the user profile page, followers, (maybe friends list), messaging system because I'm pretty excited to 
    implement those things as well, and I think they are pretty crucial in this app as well as the base functionality

may 23:
    It's time to get good with typescript... I'm going to now implement typescript in the backend portion of my code

    Wow, there's a lot to typescript, but I think it's worth it with the amazing type completion and readability it allows. some quick notes
      - To get started with typescript you have to install typescript through npm (duh). I installed it globally rather than to my project
      - Some other dependencies I needed were "@typescript-eslint/parser" and "eslint". I installed these as dev dependencies in my project
      - More dev dependencies you should download are the "@types" dependencies themselves (e.g @types/node, @types/express, etc), these will 
        actually give you the type support from your libraries
      - You also should run tsc --init to initialize a tsconfig.json file (tsc = typescript compiler). This sets up your config file with all the 
        possible compilerOptions parameters commented out. This is super nice for learning.
      - In the compilerOptions, you should add the different types (installed with @types/whatever), to the array of strings called 'types'
      - Once all that was started, typescript has good documentation that let me utilize it well. 
      - I was able to run everything through my typescript compiler and everything worked out (phew)

    Time to add typescript to my react project...
    That went well
      - I installed the types for the the few react libraries I was using
      - Next, I installed Typescript itself as a dependency (I had it installed globally, but I was getting errors yelling at me)
      - Next, I ran tsc --init to setup my tsconfig.json file. That was easy.
      - Then came the actually difficult part, I changed my components one by one to .tsx files and fixed any complications that came
      - CSS modules did not like to be imported the es6 way, so I kept them as require imports at first (I came back and fixed this later)
      - I also found that the best way to define props and state was to define an interface at the top of each component file, and use this as the 
        type being passed in (also had to define these in the generics way when declaring the class)
      - To fix the CSS modules problem, I was reading all about this typings-for-css-modules npm library but in the end, where I would also have to 
        either eject the webpack config files from node_modules/react-scripts, or have to edit them directly. This would have sucked because I 
        could have lost some functionality with react-scripts if I ejected, or I could have messed with node_modules, which could really 
        hurt others that might want to work on this in the future (node_modules is in .gitignore so)
      - I found the solution here: https://stackoverflow.com/questions/50747062/load-css-module-in-reactjs-typescript-and-react-rewired
        That was a lifesaver, all I had to do was add a typescript declaration file called 'global.d.ts' with the code 'declare module "*.css" LOL
        If I had more stackoverflow reputation, I would have commented on that with praise and upvoted it

may 24:
    A lot of the setup work is done, as far as typescript, scaffolding, things like that, so it's time I can actually start building my app 
    with a nice flow. I have a good idea for the formatting of the page. It will closely line up with the basic formatting of youtube, and 
    how that page deals with reacting to different sized devices

    The header and sidebar went very well. some things to note, I need to fix how I'm programmatically redirecting to the dashboard 
    from the signin page. After looking at the React Profiler I realize that this is causing my whole app to reload, I'll probably only want 
    to do that if I'm redirecting back to the main page upon logging out.

    I think tomorrow I will add a popup component, and work on the ability for users to customize their profiles (profile pictures, name, bio, etc)

    Quickly added a small icon for the browser tab, and changed the name. Also refactored the light grey color i was using into a css variable

may 25:
    Time to make a modal component

    So modal component went very well. Uses fixed postioning and z-index to make it block out the rest of the screen. Also used the 'react-transition-group' 
    library to allow the modal to fade in which was nice. It was kind of confusing to implement, There was some outdated articel I was reading about it, 
    and the library had changed a bit I found out when I went to the official docs. Also it threw a deprecation warning in the console about depricated 
    findDOMNode function that the library used. After looking through the issues on github I found this solution they introduced in 4.4.0
    https://github.com/reactjs/react-transition-group/blob/1fd4a65ac45edd2aea3dec18eeb8b9c07c7eb93f/CHANGELOG.md#features

    I also made the modal allow for yesno or confirmdeny options, so I'm sure that will be useful in the future. I might also want to 
    make it flexible with multiple buttons across the row at the bottom passed in via props, who knows. I probably nerded out too much on 
    this component anyway XD

    Now I'm going to get it to work completely with the signin and signup pages, and also improve the error handling/presenting for 
    those flows (invalid email, passwords dont match, user with username already exists, etc)

    I used a library called 'validate-email' to validate the email. I thought this would check that it existed, but it just used a regex to 
    make sure it could possibly be an email. I'll probably use a library called 'email-exists' later on, when I work on sending confirmation 
    emails. I also used regular expressions to ensure some validation on the username and password. this is all handled on the server and 
    then sent back to the frontend in a response. The modal component I made then presents this to the user. 

    I also fixed up how I'm navigating between routes. I was doing it in a bad way that forced the application to reload :/
    The official solution is a bit awkward, but It's alright.

may 26:
    Cleaned up any comments hanging around in my code, also made sure each tsx component deals with props/state in a uniform way/pattern