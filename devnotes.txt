may 21:
    Upon looking for authentication solutions outside of JWTs, I ended up looking at them again because they 
    are so heavily used. I thought surely I was missing something. The thing that turned me away from them 
    was that there's nowhere to 100% securely store them on the frontend for persistant login sessions. After reading 
    around a lot I found this article to be a lot of help: 
        https://dev.to/gkoniaris/how-to-securely-store-jwt-tokens-51cf
    Reading through the article and the comments carefully I came to this conclusion. 
    The best way to use JWTs for authentication is to do everything I can to prevent XSS on my frontend. 
    Then, I really could either choose between localStorage or httpOnly cookies with strict samesite options.
    This would allow only my site to pull the JWT, and if my site is secure from XSS, then I should be secure.
    That's what I'm going to roll with for now (fingers crossed I won't need to refactor a lot from this)

    I've been using the MongoClient to connect my node server to my database, I think I should be using Mongoose. 
    I should switch to that and refactor my code into services

    I've split my codebase into services and implemented mongoose. Everything is looking way cleaner now! I think I'll 
    switch over to typescript before moving on. That's something I've been wanting to implement in an app.

    Scratch that, I'm going to start my react app, feel like going back into frontend right now
    Pretty much just scaffolded out the project, set up React-Router, and learned about good styling in React. 
    I'm going with CSS modules since it keeps styling very modular much like how Vue does it.
    Now I just need to figure out the correct way to override css module styles from parent components when necessary and 
    then I should have everything I need for styling in React.

may 22:
    I think I've found the best way to override style in css modules when necessary. Passing css modules or even just 
    specific classNames through a prop that I'll call 'extraStyle' worked very well. This makes a lot of sense actually

    Another thing I found is that I should never use basic css selectors like 'h1' or 'div' even in a css module. It 
    will leak to other components. Always give things a specified className. I still very much like css modules with React

    I have an idea for an animation on the landing page, and I'm really tempted to make it right now... I should probably work 
    on something else but whatever I'm just going to do it.

    Animation looks great, now I'll make the login / signup function alright. I guess I'm going to roll with JWT authentication for now, 
    but this will probably change to a serverside session implementation with redis or something

    So I made an animation, learned more about React, have a solid pattern for styling. I think tomorrow I'll make a popup component, 
    and add some username / password validation on signup, as well as some better error handling / responses from the api. Not sure if 
    I should start on the dashboard with a page to customize the user or with the actual implementation of uploading sounds and viewing the 
    'sound tree' I'll probably start with the user profile page, followers, (maybe friends list), messaging system because I'm pretty excited to 
    implement those things as well, and I think they are pretty crucial in this app as well as the base functionality

may 23:
    It's time to get good with typescript...

    Wow, there's a lot to typescript, but I think it's worth it with the amazing type completion and readability it allows. some quick notes
        - To get started with typescript you have to install typescript through npm (duh). I installed it globally rather than to my project
        - Some other dependencies I needed were "@typescript-eslint/parser" and "eslint". I installed these as dev dependencies in my project
        - More dev dependencies you should download are the "@types" dependencies themselves (e.g @types/node, @types/express, etc), these will 
          actually give you the type support from your libraries
        - You also should run tsc --init to initialize a tsconfig.json file (tsc = typescript compiler). This sets up your config file with all the 
          possible compilerOptions parameters commented out. This is super nice for learning.
        - In the compilerOptions, you should add the different types (installed with @types/whatever), to the array of strings called 'types'
        - Once all that was started, typescript has good documentation that let me utilize it well. 
        - I was able to run everything through my typescript compiler and everything worked out (phew)